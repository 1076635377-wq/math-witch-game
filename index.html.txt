<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>双人数学版 - 女巫的毒药</title>
    <style>
        :root {
            --primary-color: #4a235a;
            --secondary-color: #8e44ad;
            --accent-color: #d4ac0d;
            --potion-color: #27ae60;
            --poison-color: #e74c3c;
            --player1-color: #3498db;
            --player2-color: #e74c3c;
            --light-color: #f8f9fa;
            --dark-color: #2c3e50;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            color: var(--light-color);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            width: 100%;
            max-width: 1200px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            color: var(--accent-color);
            text-shadow: 0 0 10px rgba(212, 172, 13, 0.5);
        }
        
        .subtitle {
            font-size: 1.2rem;
            color: #b8b8b8;
            margin-bottom: 20px;
        }
        
        .teacher-panel {
            background: rgba(44, 62, 80, 0.9);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            width: 100%;
            max-width: 1200px;
            border: 2px solid var(--accent-color);
        }
        
        .teacher-panel h3 {
            color: var(--accent-color);
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .teacher-panel-content {
            display: none;
            margin-top: 15px;
        }
        
        .question-bank-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .question-bank {
            background: rgba(26, 26, 46, 0.8);
            border-radius: 8px;
            padding: 15px;
            border: 1px solid var(--secondary-color);
        }
        
        .question-bank h4 {
            color: var(--accent-color);
            margin-bottom: 10px;
            padding-bottom: 5px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .question-list {
            max-height: 200px;
            overflow-y: auto;
            margin-bottom: 10px;
        }
        
        .question-item {
            padding: 8px;
            margin-bottom: 5px;
            background: rgba(44, 62, 80, 0.5);
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.2s;
        }
        
        .question-item:hover {
            background: rgba(78, 93, 108, 0.5);
        }
        
        .question-item.active {
            background: var(--secondary-color);
        }
        
        .question-editor {
            background: rgba(26, 26, 46, 0.8);
            border-radius: 8px;
            padding: 15px;
            border: 1px solid var(--secondary-color);
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: var(--accent-color);
        }
        
        .form-control {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid var(--secondary-color);
            background: rgba(44, 62, 80, 0.8);
            color: white;
        }
        
        textarea.form-control {
            min-height: 80px;
            resize: vertical;
        }
        
        .option-row {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .option-row input[type="radio"] {
            margin-right: 10px;
        }
        
        .option-row input[type="text"] {
            flex: 1;
        }
        
        .btn {
            background: var(--secondary-color);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 5px;
        }
        
        .btn:hover {
            background: var(--primary-color);
            transform: translateY(-2px);
        }
        
        .btn-success {
            background: var(--potion-color);
        }
        
        .btn-danger {
            background: var(--poison-color);
        }
        
        .btn-large {
            font-size: 1.5rem;
            padding: 15px 40px;
        }
        
        .start-container {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 1200px;
        }
        
        .timer-container {
            background: rgba(44, 62, 80, 0.7);
            border-radius: 10px;
            padding: 15px 30px;
            margin-bottom: 20px;
            border: 2px solid var(--accent-color);
            display: flex;
            align-items: center;
            gap: 15px;
            display: none; /* 初始隐藏，游戏开始后显示 */
        }
        
        .timer-icon {
            font-size: 2rem;
        }
        
        .timer-text {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--accent-color);
        }
        
        .timer-warning {
            color: var(--poison-color);
            animation: pulse 1s infinite;
        }
        
        .game-container {
            display: flex;
            flex-direction: row;
            width: 100%;
            max-width: 1200px;
            gap: 20px;
            margin-bottom: 20px;
            display: none; /* 初始隐藏，游戏开始后显示 */
        }
        
        .player-area {
            flex: 1;
            background: rgba(44, 62, 80, 0.7);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
        }
        
        .player1 {
            border: 2px solid var(--player1-color);
        }
        
        .player2 {
            border: 2px solid var(--player2-color);
        }
        
        .player-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .player-name {
            font-size: 1.5rem;
            font-weight: bold;
        }
        
        .player1 .player-name {
            color: var(--player1-color);
        }
        
        .player2 .player-name {
            color: var(--player2-color);
        }
        
        .player-score {
            font-size: 1.2rem;
            background: rgba(0, 0, 0, 0.3);
            padding: 5px 15px;
            border-radius: 20px;
        }
        
        .progress-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 25px;
            position: relative;
        }
        
        .progress-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 2;
        }
        
        .progress-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-bottom: 8px;
            background: var(--dark-color);
            border: 2px solid var(--secondary-color);
            transition: all 0.3s ease;
        }
        
        .progress-icon.active {
            background: var(--secondary-color);
            box-shadow: 0 0 15px var(--secondary-color);
        }
        
        .progress-icon.potion {
            border-color: var(--potion-color);
        }
        
        .progress-icon.potion.active {
            background: var(--potion-color);
            box-shadow: 0 0 15px var(--potion-color);
        }
        
        .progress-icon.poison {
            border-color: var(--poison-color);
        }
        
        .progress-icon.poison.active {
            background: var(--poison-color);
            box-shadow: 0 0 15px var(--poison-color);
        }
        
        .progress-bar {
            position: absolute;
            top: 25px;
            left: 10%;
            width: 80%;
            height: 4px;
            background: var(--dark-color);
            z-index: 1;
        }
        
        .progress-fill {
            height: 100%;
            background: var(--secondary-color);
            width: 0%;
            transition: width 0.5s ease;
        }
        
        .question-container {
            background: rgba(26, 26, 46, 0.8);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--primary-color);
            min-height: 150px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }
        
        .question-text {
            font-size: 1.3rem;
            text-align: center;
            margin-bottom: 15px;
        }
        
        .options-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .option {
            background: rgba(44, 62, 80, 0.8);
            border: 2px solid var(--secondary-color);
            border-radius: 8px;
            padding: 12px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1.1rem;
        }
        
        .option:hover {
            background: rgba(78, 93, 108, 0.8);
            transform: translateY(-3px);
        }
        
        .option.correct {
            background: var(--potion-color);
            border-color: var(--potion-color);
            animation: pulse 0.5s ease;
        }
        
        .option.incorrect {
            background: var(--poison-color);
            border-color: var(--poison-color);
            animation: shake 0.5s ease;
        }
        
        .feedback-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 150px;
            margin: 10px 0;
        }
        
        .feedback-item {
            text-align: center;
            display: none;
            animation: fadeIn 0.5s ease;
        }
        
        .feedback-icon {
            font-size: 4rem;
            margin-bottom: 10px;
            animation: bounce 1s ease infinite;
        }
        
        .potion-feedback .feedback-icon {
            color: var(--potion-color);
            text-shadow: 0 0 20px rgba(39, 174, 96, 0.7);
        }
        
        .poison-feedback .feedback-icon {
            color: var(--poison-color);
            text-shadow: 0 0 20px rgba(231, 76, 60, 0.7);
        }
        
        .feedback-text {
            font-size: 1.3rem;
            font-weight: bold;
        }
        
        .potion-feedback .feedback-text {
            color: var(--potion-color);
        }
        
        .poison-feedback .feedback-text {
            color: var(--poison-color);
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            width: 100%;
            margin-top: auto;
        }
        
        .game-over {
            text-align: center;
            padding: 30px;
            display: none;
            width: 100%;
            max-width: 800px;
            background: rgba(44, 62, 80, 0.9);
            border-radius: 15px;
            margin-top: 20px;
        }
        
        .game-over h2 {
            font-size: 2.5rem;
            margin-bottom: 20px;
            color: var(--accent-color);
        }
        
        .game-over p {
            font-size: 1.2rem;
            margin-bottom: 25px;
        }
        
        .cauldron-container {
            font-size: 8rem;
            margin: 20px 0;
            animation: float 3s ease-in-out infinite;
        }
        
        .winner-announcement {
            font-size: 2rem;
            margin: 20px 0;
            padding: 15px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.3);
        }
        
        .player1-winner {
            color: var(--player1-color);
            border: 2px solid var(--player1-color);
        }
        
        .player2-winner {
            color: var(--player2-color);
            border: 2px solid var(--player2-color);
        }
        
        .draw {
            color: var(--accent-color);
            border: 2px solid var(--accent-color);
        }
        
        /* 动画效果 */
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes shake {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }
        
        @media (max-width: 900px) {
            .game-container {
                flex-direction: column;
            }
            
            .player-area {
                width: 100%;
            }
            
            .question-bank-container {
                grid-template-columns: 1fr;
            }
        }
        
        @media (max-width: 600px) {
            .options-container {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .feedback-icon {
                font-size: 3rem;
            }
            
            .cauldron-container {
                font-size: 5rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>双人数学版 - 女巫的毒药</h1>
        <p class="subtitle">与对手竞争，在时间结束前收集更多解药成分！</p>
    </header>
    
    <!-- 教师面板 -->
    <div class="teacher-panel">
        <h3>
            <span>教师面板 - 题库管理</span>
            <button id="toggleTeacherPanel" class="btn">显示面板</button>
        </h3>
        <div class="teacher-panel-content" id="teacherPanelContent">
            <div class="question-bank-container">
                <div class="question-bank">
                    <h4>当前题库</h4>
                    <div class="question-list" id="questionList">
                        <!-- 问题列表将通过JavaScript动态生成 -->
                    </div>
                    <div>
                        <button id="addQuestionBtn" class="btn btn-success">添加新题目</button>
                        <button id="loadDefaultBtn" class="btn">加载默认题库</button>
                    </div>
                </div>
                <div class="question-editor">
                    <h4>题目编辑器</h4>
                    <div class="form-group">
                        <label for="questionText">问题内容</label>
                        <textarea id="questionText" class="form-control" placeholder="输入问题内容..."></textarea>
                    </div>
                    <div class="form-group">
                        <label>选项 (选择正确答案)</label>
                        <div class="option-row">
                            <input type="radio" name="correctAnswer" value="0" checked>
                            <input type="text" id="option0" class="form-control" placeholder="选项 A">
                        </div>
                        <div class="option-row">
                            <input type="radio" name="correctAnswer" value="1">
                            <input type="text" id="option1" class="form-control" placeholder="选项 B">
                        </div>
                        <div class="option-row">
                            <input type="radio" name="correctAnswer" value="2">
                            <input type="text" id="option2" class="form-control" placeholder="选项 C">
                        </div>
                        <div class="option-row">
                            <input type="radio" name="correctAnswer" value="3">
                            <input type="text" id="option3" class="form-control" placeholder="选项 D">
                        </div>
                    </div>
                    <div>
                        <button id="saveQuestionBtn" class="btn btn-success">保存题目</button>
                        <button id="deleteQuestionBtn" class="btn btn-danger">删除题目</button>
                        <button id="applyQuestionsBtn" class="btn">应用题库到游戏</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- 开始按钮容器 -->
    <div class="start-container">
        <button id="startGameBtn" class="btn btn-success btn-large">开始游戏</button>
    </div>
    
    <!-- 计时器容器 -->
    <div class="timer-container" id="timerContainer">
        <div class="timer-icon">⏱️</div>
        <div class="timer-text" id="timer">05:00</div>
    </div>
    
    <!-- 游戏容器 -->
    <div class="game-container" id="gameContainer">
        <!-- 玩家1区域 -->
        <div class="player-area player1">
            <div class="player-header">
                <div class="player-name">玩家 1</div>
                <div class="player-score">得分: <span id="player1Score">0</span></div>
            </div>
            
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" id="player1ProgressFill"></div>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player1Potion1">🧪</div>
                    <span>解药1</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player1Potion2">🧪</div>
                    <span>解药2</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player1Potion3">🧪</div>
                    <span>解药3</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon poison" id="player1Poison">☠️</div>
                    <span>毒药</span>
                </div>
            </div>
            
            <div class="question-container">
                <div class="question-text" id="player1QuestionText">问题将在这里显示</div>
                <div class="options-container" id="player1OptionsContainer">
                    <!-- 选项将通过JavaScript动态生成 -->
                </div>
            </div>
            
            <div class="feedback-container" id="player1FeedbackContainer">
                <div class="feedback-item potion-feedback" id="player1PotionFeedback">
                    <div class="feedback-icon">🧪</div>
                    <div class="feedback-text">解药成分收集成功！</div>
                </div>
                <div class="feedback-item poison-feedback" id="player1PoisonFeedback">
                    <div class="feedback-icon">☠️</div>
                    <div class="feedback-text">糟糕！你获得了毒药！</div>
                </div>
            </div>
            
            <div class="controls">
                <button id="player1PrevBtn" disabled>上一题</button>
                <button id="player1NextBtn">下一题</button>
            </div>
        </div>
        
        <!-- 玩家2区域 -->
        <div class="player-area player2">
            <div class="player-header">
                <div class="player-name">玩家 2</div>
                <div class="player-score">得分: <span id="player2Score">0</span></div>
            </div>
            
            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" id="player2ProgressFill"></div>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player2Potion1">🧪</div>
                    <span>解药1</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player2Potion2">🧪</div>
                    <span>解药2</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon potion" id="player2Potion3">🧪</div>
                    <span>解药3</span>
                </div>
                <div class="progress-item">
                    <div class="progress-icon poison" id="player2Poison">☠️</div>
                    <span>毒药</span>
                </div>
            </div>
            
            <div class="question-container">
                <div class="question-text" id="player2QuestionText">问题将在这里显示</div>
                <div class="options-container" id="player2OptionsContainer">
                    <!-- 选项将通过JavaScript动态生成 -->
                </div>
            </div>
            
            <div class="feedback-container" id="player2FeedbackContainer">
                <div class="feedback-item potion-feedback" id="player2PotionFeedback">
                    <div class="feedback-icon">🧪</div>
                    <div class="feedback-text">解药成分收集成功！</div>
                </div>
                <div class="feedback-item poison-feedback" id="player2PoisonFeedback">
                    <div class="feedback-icon">☠️</div>
                    <div class="feedback-text">糟糕！你获得了毒药！</div>
                </div>
            </div>
            
            <div class="controls">
                <button id="player2PrevBtn" disabled>上一题</button>
                <button id="player2NextBtn">下一题</button>
            </div>
        </div>
    </div>
    
    <div class="game-over" id="gameOver">
        <h2 id="gameResultTitle">游戏结束</h2>
        <div class="cauldron-container" id="cauldron">🧪</div>
        <div class="winner-announcement" id="winnerAnnouncement"></div>
        <p id="gameResultText"></p>
        <button id="restartBtn">重新开始游戏</button>
    </div>

    <script>
        // 新的数学题库 - 根据您提供的题目改编
        const defaultQuestions = [
            {
                question: "下列各式中，是一元一次方程的有______（请选择所有正确选项）",
                options: ["(1)和(3)", "(2)和(4)", "(1)和(5)", "(3)和(6)"],
                correctAnswer: 0
            },
            {
                question: "x=2 ______ 方程4x-1=3的解。",
                options: ["是", "不是"],
                correctAnswer: 1
            },
            {
                question: "若方程(a-b)y+x^a+4=3是关于x的一元一次方程，则a=______，b=______。",
                options: ["a=1, b=1", "a=1, b=0", "a=0, b=1", "a=1, b=任意数"],
                correctAnswer: 0
            },
            {
                question: "若关于x的方程5m+3x=1+x的解比方程2x=6的解小1，则m=______。",
                options: ["-3/5", "3/5", "-5/3", "5/3"],
                correctAnswer: 0
            },
            {
                question: "对于有理数a,b规定一种新运算：a*b=ab+b，例如：2*3=2×3+3=9，若方程(x-4)*3=6的解为x=5，则a=______。",
                options: ["6", "9", "15", "3"],
                correctAnswer: 0
            },
            {
                question: "下列哪个是一元一次方程？",
                options: ["3x+8=3", "18-x", "5x²=20", "x+y=8"],
                correctAnswer: 0
            },
            {
                question: "方程3x+5=3x+2的解的情况是？",
                options: ["无解", "有唯一解", "有无数解", "x=0"],
                correctAnswer: 0
            },
            {
                question: "若x=3是方程2x-a=7的解，则a的值是？",
                options: ["-1", "1", "5", "-5"],
                correctAnswer: 0
            },
            {
                question: "解方程：2(x-3) = 4x + 6",
                options: ["x = -6", "x = 6", "x = 0", "x = -3"],
                correctAnswer: 0
            },
            {
                question: "下列哪个不是一元一次方程？",
                options: ["2x + 3 = 7", "x² + 2x = 0", "5y - 1 = 9", "3z = 12"],
                correctAnswer: 1
            },
            {
                question: "若2x - 5 = 3，则x的值是？",
                options: ["4", "3", "2", "1"],
                correctAnswer: 0
            },
            {
                question: "方程3(x+2) = 15的解是？",
                options: ["x = 3", "x = 5", "x = 1", "x = 7"],
                correctAnswer: 0
            }
        ];

        // 游戏状态
        let currentQuestions = [...defaultQuestions];
        let gameActive = false; // 初始为false，等待开始按钮
        let timeLeft = 300; // 5分钟，单位：秒
        let timerInterval;
        let currentEditingIndex = -1; // 当前编辑的题目索引，-1表示新建
        
        // 玩家1状态
        let player1 = {
            currentQuestionIndex: 0,
            correctAnswers: 0,
            wrongAnswers: 0,
            selectedOption: null,
            answerSubmitted: false,
            questionSequence: [] // 玩家1的题目序列
        };
        
        // 玩家2状态
        let player2 = {
            currentQuestionIndex: 0,
            correctAnswers: 0,
            wrongAnswers: 0,
            selectedOption: null,
            answerSubmitted: false,
            questionSequence: [] // 玩家2的题目序列
        };

        // DOM元素
        const timer = document.getElementById('timer');
        const timerContainer = document.getElementById('timerContainer');
        const gameContainer = document.getElementById('gameContainer');
        const startGameBtn = document.getElementById('startGameBtn');
        
        // 教师面板相关元素
        const toggleTeacherPanel = document.getElementById('toggleTeacherPanel');
        const teacherPanelContent = document.getElementById('teacherPanelContent');
        const questionList = document.getElementById('questionList');
        const addQuestionBtn = document.getElementById('addQuestionBtn');
        const loadDefaultBtn = document.getElementById('loadDefaultBtn');
        const questionText = document.getElementById('questionText');
        const option0 = document.getElementById('option0');
        const option1 = document.getElementById('option1');
        const option2 = document.getElementById('option2');
        const option3 = document.getElementById('option3');
        const saveQuestionBtn = document.getElementById('saveQuestionBtn');
        const deleteQuestionBtn = document.getElementById('deleteQuestionBtn');
        const applyQuestionsBtn = document.getElementById('applyQuestionsBtn');
        
        // 玩家1 DOM元素
        const player1QuestionText = document.getElementById('player1QuestionText');
        const player1OptionsContainer = document.getElementById('player1OptionsContainer');
        const player1PrevBtn = document.getElementById('player1PrevBtn');
        const player1NextBtn = document.getElementById('player1NextBtn');
        const player1ProgressFill = document.getElementById('player1ProgressFill');
        const player1Potion1 = document.getElementById('player1Potion1');
        const player1Potion2 = document.getElementById('player1Potion2');
        const player1Potion3 = document.getElementById('player1Potion3');
        const player1Poison = document.getElementById('player1Poison');
        const player1PotionFeedback = document.getElementById('player1PotionFeedback');
        const player1PoisonFeedback = document.getElementById('player1PoisonFeedback');
        const player1Score = document.getElementById('player1Score');
        
        // 玩家2 DOM元素
        const player2QuestionText = document.getElementById('player2QuestionText');
        const player2OptionsContainer = document.getElementById('player2OptionsContainer');
        const player2PrevBtn = document.getElementById('player2PrevBtn');
        const player2NextBtn = document.getElementById('player2NextBtn');
        const player2ProgressFill = document.getElementById('player2ProgressFill');
        const player2Potion1 = document.getElementById('player2Potion1');
        const player2Potion2 = document.getElementById('player2Potion2');
        const player2Potion3 = document.getElementById('player2Potion3');
        const player2Poison = document.getElementById('player2Poison');
        const player2PotionFeedback = document.getElementById('player2PotionFeedback');
        const player2PoisonFeedback = document.getElementById('player2PoisonFeedback');
        const player2Score = document.getElementById('player2Score');
        
        // 游戏结束相关元素
        const gameOver = document.getElementById('gameOver');
        const gameResultTitle = document.getElementById('gameResultTitle');
        const gameResultText = document.getElementById('gameResultText');
        const restartBtn = document.getElementById('restartBtn');
        const cauldron = document.getElementById('cauldron');
        const winnerAnnouncement = document.getElementById('winnerAnnouncement');

        // 初始化游戏
        function initGame() {
            // 重置游戏状态
            gameActive = false; // 等待开始按钮
            timeLeft = 300;
            clearInterval(timerInterval);
            
            // 为每个玩家生成独立的题目序列
            generateQuestionSequences();
            
            // 重置玩家状态
            player1 = {
                currentQuestionIndex: 0,
                correctAnswers: 0,
                wrongAnswers: 0,
                selectedOption: null,
                answerSubmitted: false,
                questionSequence: player1.questionSequence // 保留题目序列
            };
            
            player2 = {
                currentQuestionIndex: 0,
                correctAnswers: 0,
                wrongAnswers: 0,
                selectedOption: null,
                answerSubmitted: false,
                questionSequence: player2.questionSequence // 保留题目序列
            };
            
            // 更新UI
            updatePlayerProgress(player1, 'player1');
            updatePlayerProgress(player2, 'player2');
            displayPlayerQuestion(player1, 'player1');
            displayPlayerQuestion(player2, 'player2');
            updatePlayerButtons(player1, 'player1');
            updatePlayerButtons(player2, 'player2');
            hidePlayerFeedback('player1');
            hidePlayerFeedback('player2');
            
            // 隐藏游戏区域，显示开始按钮
            gameOver.style.display = 'none';
            gameContainer.style.display = 'none';
            timerContainer.style.display = 'none';
            startGameBtn.style.display = 'block';
            
            // 更新题库显示
            updateQuestionList();
        }

        // 为每个玩家生成独立的题目序列
        function generateQuestionSequences() {
            // 创建题库的副本
            const questionsCopy = [...currentQuestions];
            
            // 为玩家1生成题目序列（随机排序）
            player1.questionSequence = [...questionsCopy];
            shuffleArray(player1.questionSequence);
            
            // 为玩家2生成题目序列（随机排序）
            player2.questionSequence = [...questionsCopy];
            shuffleArray(player2.questionSequence);
        }

        // 随机打乱数组（Fisher-Yates算法）
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        // 开始游戏
        function startGame() {
            gameActive = true;
            startGameBtn.style.display = 'none';
            timerContainer.style.display = 'flex';
            gameContainer.style.display = 'flex';
            startTimer();
        }

        // 开始倒计时
        function startTimer() {
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    endGame();
                } else if (timeLeft <= 30) {
                    timer.classList.add('timer-warning');
                }
            }, 1000);
        }

        // 更新计时器显示
        function updateTimerDisplay() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // 显示玩家问题
        function displayPlayerQuestion(player, playerId) {
            // 从玩家的题目序列中获取当前题目
            const currentQuestion = player.questionSequence[player.currentQuestionIndex];
            const questionText = document.getElementById(`${playerId}QuestionText`);
            const optionsContainer = document.getElementById(`${playerId}OptionsContainer`);
            
            questionText.textContent = currentQuestion.question;
            
            optionsContainer.innerHTML = '';
            currentQuestion.options.forEach((option, index) => {
                const optionElement = document.createElement('div');
                optionElement.className = 'option';
                optionElement.textContent = option;
                optionElement.dataset.index = index;
                optionElement.addEventListener('click', () => selectPlayerOption(optionElement, player, playerId));
                optionsContainer.appendChild(optionElement);
            });
            
            hidePlayerFeedback(playerId);
            player.answerSubmitted = false;
            player.selectedOption = null;
        }

        // 选择玩家选项
        function selectPlayerOption(optionElement, player, playerId) {
            if (!gameActive || player.answerSubmitted) return;
            
            // 清除之前的选择
            document.querySelectorAll(`#${playerId}OptionsContainer .option`).forEach(opt => {
                opt.classList.remove('selected');
            });
            
            // 设置新选择
            optionElement.classList.add('selected');
            player.selectedOption = parseInt(optionElement.dataset.index);
            
            // 立即提交答案并显示反馈
            submitPlayerAnswer(player, playerId);
        }

        // 提交玩家答案
        function submitPlayerAnswer(player, playerId) {
            if (player.selectedOption === null || player.answerSubmitted) return;
            
            player.answerSubmitted = true;
            // 从玩家的题目序列中获取当前题目
            const currentQuestion = player.questionSequence[player.currentQuestionIndex];
            const isCorrect = player.selectedOption === currentQuestion.correctAnswer;
            
            // 高亮显示正确和错误答案
            document.querySelectorAll(`#${playerId}OptionsContainer .option`).forEach((option, index) => {
                if (index === currentQuestion.correctAnswer) {
                    option.classList.add('correct');
                } else if (index === player.selectedOption && !isCorrect) {
                    option.classList.add('incorrect');
                }
            });
            
            // 显示反馈
            if (isCorrect) {
                player.correctAnswers++;
                showPlayerPotionFeedback(playerId);
            } else {
                player.wrongAnswers++;
                showPlayerPoisonFeedback(playerId);
            }
            
            updatePlayerProgress(player, playerId);
        }

        // 显示玩家解药反馈
        function showPlayerPotionFeedback(playerId) {
            document.getElementById(`${playerId}PotionFeedback`).style.display = 'block';
            document.getElementById(`${playerId}PoisonFeedback`).style.display = 'none';
        }

        // 显示玩家毒药反馈
        function showPlayerPoisonFeedback(playerId) {
            document.getElementById(`${playerId}PoisonFeedback`).style.display = 'block';
            document.getElementById(`${playerId}PotionFeedback`).style.display = 'none';
        }

        // 隐藏玩家反馈
        function hidePlayerFeedback(playerId) {
            document.getElementById(`${playerId}PotionFeedback`).style.display = 'none';
            document.getElementById(`${playerId}PoisonFeedback`).style.display = 'none';
        }

        // 更新玩家进度
        function updatePlayerProgress(player, playerId) {
            // 更新进度条
            const progressFill = document.getElementById(`${playerId}ProgressFill`);
            const progressPercentage = (player.currentQuestionIndex / (player.questionSequence.length - 1)) * 80;
            progressFill.style.width = `${progressPercentage}%`;
            
            // 更新解药和毒药图标
            document.getElementById(`${playerId}Potion1`).className = 
                player.correctAnswers >= 1 ? 'progress-icon potion active' : 'progress-icon potion';
            document.getElementById(`${playerId}Potion2`).className = 
                player.correctAnswers >= 2 ? 'progress-icon potion active' : 'progress-icon potion';
            document.getElementById(`${playerId}Potion3`).className = 
                player.correctAnswers >= 3 ? 'progress-icon potion active' : 'progress-icon potion';
            document.getElementById(`${playerId}Poison`).className = 
                player.wrongAnswers >= 1 ? 'progress-icon poison active' : 'progress-icon poison';
            
            // 更新分数显示
            document.getElementById(`${playerId}Score`).textContent = player.correctAnswers;
        }

        // 更新玩家按钮状态
        function updatePlayerButtons(player, playerId) {
            const prevBtn = document.getElementById(`${playerId}PrevBtn`);
            const nextBtn = document.getElementById(`${playerId}NextBtn`);
            
            prevBtn.disabled = player.currentQuestionIndex === 0;
            
            if (player.currentQuestionIndex === player.questionSequence.length - 1) {
                nextBtn.textContent = '最后一题';
            } else {
                nextBtn.textContent = '下一题';
            }
        }

        // 玩家下一题
        function playerNextQuestion(player, playerId) {
            if (player.currentQuestionIndex < player.questionSequence.length - 1) {
                player.currentQuestionIndex++;
                displayPlayerQuestion(player, playerId);
                updatePlayerButtons(player, playerId);
            }
        }

        // 玩家上一题
        function playerPrevQuestion(player, playerId) {
            if (player.currentQuestionIndex > 0) {
                player.currentQuestionIndex--;
                displayPlayerQuestion(player, playerId);
                updatePlayerButtons(player, playerId);
            }
        }

        // 结束游戏
        function endGame() {
            gameActive = false;
            clearInterval(timerInterval);
            
            document.querySelector('.game-container').style.display = 'none';
            gameOver.style.display = 'block';
            
            // 判断胜负
            let resultText = '';
            let winnerClass = '';
            
            if (player1.correctAnswers > player2.correctAnswers) {
                resultText = `玩家1获胜！收集了${player1.correctAnswers}个解药成分！`;
                winnerClass = 'player1-winner';
            } else if (player2.correctAnswers > player1.correctAnswers) {
                resultText = `玩家2获胜！收集了${player2.correctAnswers}个解药成分！`;
                winnerClass = 'player2-winner';
            } else {
                resultText = `平局！双方都收集了${player1.correctAnswers}个解药成分！`;
                winnerClass = 'draw';
            }
            
            // 显示毒药坩埚
            cauldron.textContent = '🧪';
            
            // 显示结果
            gameResultTitle.textContent = "时间到！游戏结束！";
            winnerAnnouncement.textContent = resultText;
            winnerAnnouncement.className = `winner-announcement ${winnerClass}`;
            gameResultText.textContent = `玩家1: ${player1.correctAnswers}个解药 | 玩家2: ${player2.correctAnswers}个解药`;
        }

        // 教师面板功能
        function toggleTeacherPanelView() {
            if (teacherPanelContent.style.display === 'block') {
                teacherPanelContent.style.display = 'none';
                toggleTeacherPanel.textContent = '显示面板';
            } else {
                teacherPanelContent.style.display = 'block';
                toggleTeacherPanel.textContent = '隐藏面板';
                updateQuestionList();
            }
        }

        // 更新题目列表
        function updateQuestionList() {
            questionList.innerHTML = '';
            currentQuestions.forEach((question, index) => {
                const questionItem = document.createElement('div');
                questionItem.className = 'question-item';
                if (index === currentEditingIndex) {
                    questionItem.classList.add('active');
                }
                questionItem.textContent = `${index + 1}. ${question.question.substring(0, 50)}${question.question.length > 50 ? '...' : ''}`;
                questionItem.addEventListener('click', () => editQuestion(index));
                questionList.appendChild(questionItem);
            });
        }

        // 编辑题目
        function editQuestion(index) {
            currentEditingIndex = index;
            const question = currentQuestions[index];
            
            questionText.value = question.question;
            option0.value = question.options[0];
            option1.value = question.options[1];
            option2.value = question.options[2];
            option3.value = question.options[3];
            
            // 设置正确答案
            document.querySelector(`input[name="correctAnswer"][value="${question.correctAnswer}"]`).checked = true;
            
            updateQuestionList();
        }

        // 添加新题目
        function addNewQuestion() {
            currentEditingIndex = -1;
            questionText.value = '';
            option0.value = '';
            option1.value = '';
            option2.value = '';
            option3.value = '';
            document.querySelector('input[name="correctAnswer"][value="0"]').checked = true;
            updateQuestionList();
        }

        // 保存题目
        function saveQuestion() {
            const questionValue = questionText.value.trim();
            const option0Value = option0.value.trim();
            const option1Value = option1.value.trim();
            const option2Value = option2.value.trim();
            const option3Value = option3.value.trim();
            const correctAnswerValue = parseInt(document.querySelector('input[name="correctAnswer"]:checked').value);
            
            if (!questionValue || !option0Value || !option1Value || !option2Value || !option3Value) {
                alert('请填写完整的问题和所有选项！');
                return;
            }
            
            const question = {
                question: questionValue,
                options: [option0Value, option1Value, option2Value, option3Value],
                correctAnswer: correctAnswerValue
            };
            
            if (currentEditingIndex === -1) {
                // 添加新题目
                currentQuestions.push(question);
            } else {
                // 更新现有题目
                currentQuestions[currentEditingIndex] = question;
            }
            
            updateQuestionList();
            alert('题目已保存！');
        }

        // 删除题目
        function deleteQuestion() {
            if (currentEditingIndex === -1) {
                alert('请先选择一个题目进行删除！');
                return;
            }
            
            if (confirm('确定要删除这个题目吗？')) {
                currentQuestions.splice(currentEditingIndex, 1);
                currentEditingIndex = -1;
                questionText.value = '';
                option0.value = '';
                option1.value = '';
                option2.value = '';
                option3.value = '';
                document.querySelector('input[name="correctAnswer"][value="0"]').checked = true;
                updateQuestionList();
                alert('题目已删除！');
            }
        }

        // 加载默认题库
        function loadDefaultQuestions() {
            if (confirm('确定要加载默认题库吗？当前题库将被替换。')) {
                currentQuestions = [...defaultQuestions];
                updateQuestionList();
                alert('默认题库已加载！');
            }
        }

        // 应用题库到游戏
        function applyQuestionsToGame() {
            if (currentQuestions.length === 0) {
                alert('题库为空，请先添加题目！');
                return;
            }
            
            if (confirm('确定要应用当前题库到游戏吗？游戏将重新开始。')) {
                initGame();
                alert('题库已应用到游戏！');
            }
        }

        // 事件监听
        player1NextBtn.addEventListener('click', () => playerNextQuestion(player1, 'player1'));
        player1PrevBtn.addEventListener('click', () => playerPrevQuestion(player1, 'player1'));
        player2NextBtn.addEventListener('click', () => playerNextQuestion(player2, 'player2'));
        player2PrevBtn.addEventListener('click', () => playerPrevQuestion(player2, 'player2'));
        restartBtn.addEventListener('click', initGame);
        startGameBtn.addEventListener('click', startGame);
        
        // 教师面板事件监听
        toggleTeacherPanel.addEventListener('click', toggleTeacherPanelView);
        addQuestionBtn.addEventListener('click', addNewQuestion);
        loadDefaultBtn.addEventListener('click', loadDefaultQuestions);
        saveQuestionBtn.addEventListener('click', saveQuestion);
        deleteQuestionBtn.addEventListener('click', deleteQuestion);
        applyQuestionsBtn.addEventListener('click', applyQuestionsToGame);

        // 初始化游戏
        initGame();
    </script>
</body>
</html>